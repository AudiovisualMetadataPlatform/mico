package mico.event.model;

option java_package = "eu.mico.platform.event.model";

enum Implementation {
  JAVA   = 1;
  CPP    = 2;
  PYTHON = 3;
}

enum RegistrationType {
  REGISTER   = 1;
  UNREGISTER = 2;
}

enum MessageType {
  PROGRESS = 1; //!< indicates, that the message is an value between 0..100
  FINISH   = 2; //!< indicates, that the processing is done
  NEW_PART = 3; //!< used to inform the broker that a new part was added to the item
  ERROR    = 4; //!< indicates, that the processing failed and the message contains an error and further description
}

enum ErrorCodes{
  UNSUPPORTED_CONTENT_TYPE    = 30; // could be a bug in broker or in an extractor which provided that content (created content with different type then stated in annotation)
  UNSUPPORTED_CONTENT_VARIANT = 31; // e.g. an animated 32bit HDR TIFF that cannot be read by an extractor using libtiff, while a 8bit RGB TIFF can be read without problem
  DECODING_ERROR              = 32; // error in binary data / stream
  MISSING_ANNOTATION          = 35; // extractor depends on non-existing annotation from other extractor
  INSUFFICIENT_RESOURCE       = 40; // extractor is not able to process this part
  INSUFFICIENT_STORAGE        = 41; // more detailed info then INSUFFICIENT_RESOURCE
  UNEXPECTED_ERROR            = 50; // unknown / non-resolvable error
}

/**
 * Register a service with the message broker by sending its service identifier and input queue name.
 */
message RegistrationEvent {
  required string serviceId        = 1; //!< service identifier of service, e.g. eu.mico.example.ExampleService
  required string queueName        = 2; //!< input queue name used by service, e.g. exampleServiceQueue
  required string provides         = 3; //!< type of output this service provides (MIME type, e.g. text/plain)
  required string requires         = 4; //!< type of input this service provides (MIME type, e.g. text/html)
  optional Implementation language = 5 [default = JAVA];
  optional RegistrationType type   = 6 [default = REGISTER];
}



/**
 * Notify a service that a analysis should continue using the given content item and object in that
 * content item. The content item URI is the unique identifier of the content item (a URI). The
 * object URI is the URI of an object that should be taken into account by the receiving service;
 * this can be a content part (identified by its URI), a fragment identified and stored in the
 * metadata, etc.
 *
 * AnalysisEvents are sent both, by the message broker to notify services that they should start
 * analysing an object, and by services to notify the message broker that they added a new object.
 */
message AnalysisEvent {
  required string serviceId      = 1; //!< service identifier of the service generating the event
  required string contentItemUri = 2; //!< URI of the content item being processed
  repeated string objectUri      = 3; //!< URI of the object of that content item being processed
  optional MessageType type      = 4;  //!< progress, error
  optional string message        = 5;  //!< a short info
  optional string description    = 6;  //!< further description of message
  optional ErrorCodes errorCode  = 7;  //!< one of the predefined error codes, used by broker to handle error
}

message AnalysisRequest{
message ParamEntry {
  required string key = 1;
  required string value = 2;
}
  required string serviceId      = 1;  // service identifier of the service generating the event
  required string contentItemUri = 2;  // URI of the content item being processed
  repeated string objectUri      = 3;  // URI of the object of that content item being processed
  repeated ParamEntry params     = 10; // a map with runtime parameters for the extractor
}

message AnalyzeProgress {
  required string serviceId      = 1; //!< service identifier of the service generating the event
  required string contentItemUri = 2; //!< URI of the content item being processed
  required string objectUri      = 3; //!< URI of the object of that content item being processed
  required MessageType type      = 4 [default = PROGRESS]; //!< 
  required float progress       = 5; //!< normalized progress of extractor (0.0 .. 1.0)
}

/**
 * Notify the broker that a new content item is available in the system using the given URI.
 */
message ContentEvent {
  required string contentItemUri = 1;
}


message DiscoveryEvent {

}

/**
 * Marmotta and storage base URI to be used by the client (e.g. extractor, injector)
 */
message ConfigurationEvent {
  required string marmottaBaseUri = 1; //!< base URI for the Marmotta triples.
  required string storageBaseUri  = 2; //!< base URI for storage.
}

message ConfigurationDiscoverEvent {

}
