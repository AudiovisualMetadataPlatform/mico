/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Event.proto

#ifndef PROTOBUF_Event_2eproto__INCLUDED
#define PROTOBUF_Event_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mico {
namespace event {
namespace model {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Event_2eproto();
void protobuf_AssignDesc_Event_2eproto();
void protobuf_ShutdownFile_Event_2eproto();

class RegistrationEvent;
class AnalysisEvent;
class ContentEvent;
class DiscoveryEvent;

enum Implementation {
  JAVA = 1,
  CPP = 2,
  PYTHON = 3
};
bool Implementation_IsValid(int value);
const Implementation Implementation_MIN = JAVA;
const Implementation Implementation_MAX = PYTHON;
const int Implementation_ARRAYSIZE = Implementation_MAX + 1;

const ::google::protobuf::EnumDescriptor* Implementation_descriptor();
inline const ::std::string& Implementation_Name(Implementation value) {
  return ::google::protobuf::internal::NameOfEnum(
    Implementation_descriptor(), value);
}
inline bool Implementation_Parse(
    const ::std::string& name, Implementation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Implementation>(
    Implementation_descriptor(), name, value);
}
enum RegistrationType {
  REGISTER = 1,
  UNREGISTER = 2
};
bool RegistrationType_IsValid(int value);
const RegistrationType RegistrationType_MIN = REGISTER;
const RegistrationType RegistrationType_MAX = UNREGISTER;
const int RegistrationType_ARRAYSIZE = RegistrationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegistrationType_descriptor();
inline const ::std::string& RegistrationType_Name(RegistrationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegistrationType_descriptor(), value);
}
inline bool RegistrationType_Parse(
    const ::std::string& name, RegistrationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegistrationType>(
    RegistrationType_descriptor(), name, value);
}
// ===================================================================

class RegistrationEvent : public ::google::protobuf::Message {
 public:
  RegistrationEvent();
  virtual ~RegistrationEvent();

  RegistrationEvent(const RegistrationEvent& from);

  inline RegistrationEvent& operator=(const RegistrationEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistrationEvent& default_instance();

  void Swap(RegistrationEvent* other);

  // implements Message ----------------------------------------------

  RegistrationEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegistrationEvent& from);
  void MergeFrom(const RegistrationEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serviceId = 1;
  inline bool has_serviceid() const;
  inline void clear_serviceid();
  static const int kServiceIdFieldNumber = 1;
  inline const ::std::string& serviceid() const;
  inline void set_serviceid(const ::std::string& value);
  inline void set_serviceid(const char* value);
  inline void set_serviceid(const char* value, size_t size);
  inline ::std::string* mutable_serviceid();
  inline ::std::string* release_serviceid();
  inline void set_allocated_serviceid(::std::string* serviceid);

  // required string queueName = 2;
  inline bool has_queuename() const;
  inline void clear_queuename();
  static const int kQueueNameFieldNumber = 2;
  inline const ::std::string& queuename() const;
  inline void set_queuename(const ::std::string& value);
  inline void set_queuename(const char* value);
  inline void set_queuename(const char* value, size_t size);
  inline ::std::string* mutable_queuename();
  inline ::std::string* release_queuename();
  inline void set_allocated_queuename(::std::string* queuename);

  // required string provides = 3;
  inline bool has_provides() const;
  inline void clear_provides();
  static const int kProvidesFieldNumber = 3;
  inline const ::std::string& provides() const;
  inline void set_provides(const ::std::string& value);
  inline void set_provides(const char* value);
  inline void set_provides(const char* value, size_t size);
  inline ::std::string* mutable_provides();
  inline ::std::string* release_provides();
  inline void set_allocated_provides(::std::string* provides);

  // required string requires = 4;
  inline bool has_requires() const;
  inline void clear_requires();
  static const int kRequiresFieldNumber = 4;
  inline const ::std::string& requires() const;
  inline void set_requires(const ::std::string& value);
  inline void set_requires(const char* value);
  inline void set_requires(const char* value, size_t size);
  inline ::std::string* mutable_requires();
  inline ::std::string* release_requires();
  inline void set_allocated_requires(::std::string* requires);

  // optional .mico.event.model.Implementation language = 5 [default = JAVA];
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 5;
  inline ::mico::event::model::Implementation language() const;
  inline void set_language(::mico::event::model::Implementation value);

  // optional .mico.event.model.RegistrationType type = 6 [default = REGISTER];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::mico::event::model::RegistrationType type() const;
  inline void set_type(::mico::event::model::RegistrationType value);

  // @@protoc_insertion_point(class_scope:mico.event.model.RegistrationEvent)
 private:
  inline void set_has_serviceid();
  inline void clear_has_serviceid();
  inline void set_has_queuename();
  inline void clear_has_queuename();
  inline void set_has_provides();
  inline void clear_has_provides();
  inline void set_has_requires();
  inline void clear_has_requires();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serviceid_;
  ::std::string* queuename_;
  ::std::string* provides_;
  ::std::string* requires_;
  int language_;
  int type_;
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();

  void InitAsDefaultInstance();
  static RegistrationEvent* default_instance_;
};
// -------------------------------------------------------------------

class AnalysisEvent : public ::google::protobuf::Message {
 public:
  AnalysisEvent();
  virtual ~AnalysisEvent();

  AnalysisEvent(const AnalysisEvent& from);

  inline AnalysisEvent& operator=(const AnalysisEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalysisEvent& default_instance();

  void Swap(AnalysisEvent* other);

  // implements Message ----------------------------------------------

  AnalysisEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalysisEvent& from);
  void MergeFrom(const AnalysisEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serviceId = 1;
  inline bool has_serviceid() const;
  inline void clear_serviceid();
  static const int kServiceIdFieldNumber = 1;
  inline const ::std::string& serviceid() const;
  inline void set_serviceid(const ::std::string& value);
  inline void set_serviceid(const char* value);
  inline void set_serviceid(const char* value, size_t size);
  inline ::std::string* mutable_serviceid();
  inline ::std::string* release_serviceid();
  inline void set_allocated_serviceid(::std::string* serviceid);

  // required string contentItemUri = 2;
  inline bool has_contentitemuri() const;
  inline void clear_contentitemuri();
  static const int kContentItemUriFieldNumber = 2;
  inline const ::std::string& contentitemuri() const;
  inline void set_contentitemuri(const ::std::string& value);
  inline void set_contentitemuri(const char* value);
  inline void set_contentitemuri(const char* value, size_t size);
  inline ::std::string* mutable_contentitemuri();
  inline ::std::string* release_contentitemuri();
  inline void set_allocated_contentitemuri(::std::string* contentitemuri);

  // optional string objectUri = 3;
  inline bool has_objecturi() const;
  inline void clear_objecturi();
  static const int kObjectUriFieldNumber = 3;
  inline const ::std::string& objecturi() const;
  inline void set_objecturi(const ::std::string& value);
  inline void set_objecturi(const char* value);
  inline void set_objecturi(const char* value, size_t size);
  inline ::std::string* mutable_objecturi();
  inline ::std::string* release_objecturi();
  inline void set_allocated_objecturi(::std::string* objecturi);

  // @@protoc_insertion_point(class_scope:mico.event.model.AnalysisEvent)
 private:
  inline void set_has_serviceid();
  inline void clear_has_serviceid();
  inline void set_has_contentitemuri();
  inline void clear_has_contentitemuri();
  inline void set_has_objecturi();
  inline void clear_has_objecturi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serviceid_;
  ::std::string* contentitemuri_;
  ::std::string* objecturi_;
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();

  void InitAsDefaultInstance();
  static AnalysisEvent* default_instance_;
};
// -------------------------------------------------------------------

class ContentEvent : public ::google::protobuf::Message {
 public:
  ContentEvent();
  virtual ~ContentEvent();

  ContentEvent(const ContentEvent& from);

  inline ContentEvent& operator=(const ContentEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentEvent& default_instance();

  void Swap(ContentEvent* other);

  // implements Message ----------------------------------------------

  ContentEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentEvent& from);
  void MergeFrom(const ContentEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string contentItemUri = 1;
  inline bool has_contentitemuri() const;
  inline void clear_contentitemuri();
  static const int kContentItemUriFieldNumber = 1;
  inline const ::std::string& contentitemuri() const;
  inline void set_contentitemuri(const ::std::string& value);
  inline void set_contentitemuri(const char* value);
  inline void set_contentitemuri(const char* value, size_t size);
  inline ::std::string* mutable_contentitemuri();
  inline ::std::string* release_contentitemuri();
  inline void set_allocated_contentitemuri(::std::string* contentitemuri);

  // @@protoc_insertion_point(class_scope:mico.event.model.ContentEvent)
 private:
  inline void set_has_contentitemuri();
  inline void clear_has_contentitemuri();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* contentitemuri_;
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();

  void InitAsDefaultInstance();
  static ContentEvent* default_instance_;
};
// -------------------------------------------------------------------

class DiscoveryEvent : public ::google::protobuf::Message {
 public:
  DiscoveryEvent();
  virtual ~DiscoveryEvent();

  DiscoveryEvent(const DiscoveryEvent& from);

  inline DiscoveryEvent& operator=(const DiscoveryEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiscoveryEvent& default_instance();

  void Swap(DiscoveryEvent* other);

  // implements Message ----------------------------------------------

  DiscoveryEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiscoveryEvent& from);
  void MergeFrom(const DiscoveryEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mico.event.model.DiscoveryEvent)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();

  void InitAsDefaultInstance();
  static DiscoveryEvent* default_instance_;
};
// ===================================================================


// ===================================================================

// RegistrationEvent

// required string serviceId = 1;
inline bool RegistrationEvent::has_serviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegistrationEvent::set_has_serviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegistrationEvent::clear_has_serviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegistrationEvent::clear_serviceid() {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_->clear();
  }
  clear_has_serviceid();
}
inline const ::std::string& RegistrationEvent::serviceid() const {
  // @@protoc_insertion_point(field_get:mico.event.model.RegistrationEvent.serviceId)
  return *serviceid_;
}
inline void RegistrationEvent::set_serviceid(const ::std::string& value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set:mico.event.model.RegistrationEvent.serviceId)
}
inline void RegistrationEvent::set_serviceid(const char* value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mico.event.model.RegistrationEvent.serviceId)
}
inline void RegistrationEvent::set_serviceid(const char* value, size_t size) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mico.event.model.RegistrationEvent.serviceId)
}
inline ::std::string* RegistrationEvent::mutable_serviceid() {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mico.event.model.RegistrationEvent.serviceId)
  return serviceid_;
}
inline ::std::string* RegistrationEvent::release_serviceid() {
  clear_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serviceid_;
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationEvent::set_allocated_serviceid(::std::string* serviceid) {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (serviceid) {
    set_has_serviceid();
    serviceid_ = serviceid;
  } else {
    clear_has_serviceid();
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mico.event.model.RegistrationEvent.serviceId)
}

// required string queueName = 2;
inline bool RegistrationEvent::has_queuename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegistrationEvent::set_has_queuename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegistrationEvent::clear_has_queuename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegistrationEvent::clear_queuename() {
  if (queuename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    queuename_->clear();
  }
  clear_has_queuename();
}
inline const ::std::string& RegistrationEvent::queuename() const {
  // @@protoc_insertion_point(field_get:mico.event.model.RegistrationEvent.queueName)
  return *queuename_;
}
inline void RegistrationEvent::set_queuename(const ::std::string& value) {
  set_has_queuename();
  if (queuename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    queuename_ = new ::std::string;
  }
  queuename_->assign(value);
  // @@protoc_insertion_point(field_set:mico.event.model.RegistrationEvent.queueName)
}
inline void RegistrationEvent::set_queuename(const char* value) {
  set_has_queuename();
  if (queuename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    queuename_ = new ::std::string;
  }
  queuename_->assign(value);
  // @@protoc_insertion_point(field_set_char:mico.event.model.RegistrationEvent.queueName)
}
inline void RegistrationEvent::set_queuename(const char* value, size_t size) {
  set_has_queuename();
  if (queuename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    queuename_ = new ::std::string;
  }
  queuename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mico.event.model.RegistrationEvent.queueName)
}
inline ::std::string* RegistrationEvent::mutable_queuename() {
  set_has_queuename();
  if (queuename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    queuename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mico.event.model.RegistrationEvent.queueName)
  return queuename_;
}
inline ::std::string* RegistrationEvent::release_queuename() {
  clear_has_queuename();
  if (queuename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = queuename_;
    queuename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationEvent::set_allocated_queuename(::std::string* queuename) {
  if (queuename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queuename_;
  }
  if (queuename) {
    set_has_queuename();
    queuename_ = queuename;
  } else {
    clear_has_queuename();
    queuename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mico.event.model.RegistrationEvent.queueName)
}

// required string provides = 3;
inline bool RegistrationEvent::has_provides() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegistrationEvent::set_has_provides() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegistrationEvent::clear_has_provides() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegistrationEvent::clear_provides() {
  if (provides_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provides_->clear();
  }
  clear_has_provides();
}
inline const ::std::string& RegistrationEvent::provides() const {
  // @@protoc_insertion_point(field_get:mico.event.model.RegistrationEvent.provides)
  return *provides_;
}
inline void RegistrationEvent::set_provides(const ::std::string& value) {
  set_has_provides();
  if (provides_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provides_ = new ::std::string;
  }
  provides_->assign(value);
  // @@protoc_insertion_point(field_set:mico.event.model.RegistrationEvent.provides)
}
inline void RegistrationEvent::set_provides(const char* value) {
  set_has_provides();
  if (provides_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provides_ = new ::std::string;
  }
  provides_->assign(value);
  // @@protoc_insertion_point(field_set_char:mico.event.model.RegistrationEvent.provides)
}
inline void RegistrationEvent::set_provides(const char* value, size_t size) {
  set_has_provides();
  if (provides_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provides_ = new ::std::string;
  }
  provides_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mico.event.model.RegistrationEvent.provides)
}
inline ::std::string* RegistrationEvent::mutable_provides() {
  set_has_provides();
  if (provides_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    provides_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mico.event.model.RegistrationEvent.provides)
  return provides_;
}
inline ::std::string* RegistrationEvent::release_provides() {
  clear_has_provides();
  if (provides_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = provides_;
    provides_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationEvent::set_allocated_provides(::std::string* provides) {
  if (provides_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete provides_;
  }
  if (provides) {
    set_has_provides();
    provides_ = provides;
  } else {
    clear_has_provides();
    provides_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mico.event.model.RegistrationEvent.provides)
}

// required string requires = 4;
inline bool RegistrationEvent::has_requires() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegistrationEvent::set_has_requires() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegistrationEvent::clear_has_requires() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegistrationEvent::clear_requires() {
  if (requires_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requires_->clear();
  }
  clear_has_requires();
}
inline const ::std::string& RegistrationEvent::requires() const {
  // @@protoc_insertion_point(field_get:mico.event.model.RegistrationEvent.requires)
  return *requires_;
}
inline void RegistrationEvent::set_requires(const ::std::string& value) {
  set_has_requires();
  if (requires_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requires_ = new ::std::string;
  }
  requires_->assign(value);
  // @@protoc_insertion_point(field_set:mico.event.model.RegistrationEvent.requires)
}
inline void RegistrationEvent::set_requires(const char* value) {
  set_has_requires();
  if (requires_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requires_ = new ::std::string;
  }
  requires_->assign(value);
  // @@protoc_insertion_point(field_set_char:mico.event.model.RegistrationEvent.requires)
}
inline void RegistrationEvent::set_requires(const char* value, size_t size) {
  set_has_requires();
  if (requires_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requires_ = new ::std::string;
  }
  requires_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mico.event.model.RegistrationEvent.requires)
}
inline ::std::string* RegistrationEvent::mutable_requires() {
  set_has_requires();
  if (requires_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requires_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mico.event.model.RegistrationEvent.requires)
  return requires_;
}
inline ::std::string* RegistrationEvent::release_requires() {
  clear_has_requires();
  if (requires_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = requires_;
    requires_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegistrationEvent::set_allocated_requires(::std::string* requires) {
  if (requires_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requires_;
  }
  if (requires) {
    set_has_requires();
    requires_ = requires;
  } else {
    clear_has_requires();
    requires_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mico.event.model.RegistrationEvent.requires)
}

// optional .mico.event.model.Implementation language = 5 [default = JAVA];
inline bool RegistrationEvent::has_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegistrationEvent::set_has_language() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegistrationEvent::clear_has_language() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegistrationEvent::clear_language() {
  language_ = 1;
  clear_has_language();
}
inline ::mico::event::model::Implementation RegistrationEvent::language() const {
  // @@protoc_insertion_point(field_get:mico.event.model.RegistrationEvent.language)
  return static_cast< ::mico::event::model::Implementation >(language_);
}
inline void RegistrationEvent::set_language(::mico::event::model::Implementation value) {
  assert(::mico::event::model::Implementation_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:mico.event.model.RegistrationEvent.language)
}

// optional .mico.event.model.RegistrationType type = 6 [default = REGISTER];
inline bool RegistrationEvent::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegistrationEvent::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegistrationEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegistrationEvent::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mico::event::model::RegistrationType RegistrationEvent::type() const {
  // @@protoc_insertion_point(field_get:mico.event.model.RegistrationEvent.type)
  return static_cast< ::mico::event::model::RegistrationType >(type_);
}
inline void RegistrationEvent::set_type(::mico::event::model::RegistrationType value) {
  assert(::mico::event::model::RegistrationType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mico.event.model.RegistrationEvent.type)
}

// -------------------------------------------------------------------

// AnalysisEvent

// required string serviceId = 1;
inline bool AnalysisEvent::has_serviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnalysisEvent::set_has_serviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnalysisEvent::clear_has_serviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnalysisEvent::clear_serviceid() {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_->clear();
  }
  clear_has_serviceid();
}
inline const ::std::string& AnalysisEvent::serviceid() const {
  // @@protoc_insertion_point(field_get:mico.event.model.AnalysisEvent.serviceId)
  return *serviceid_;
}
inline void AnalysisEvent::set_serviceid(const ::std::string& value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set:mico.event.model.AnalysisEvent.serviceId)
}
inline void AnalysisEvent::set_serviceid(const char* value) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mico.event.model.AnalysisEvent.serviceId)
}
inline void AnalysisEvent::set_serviceid(const char* value, size_t size) {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  serviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mico.event.model.AnalysisEvent.serviceId)
}
inline ::std::string* AnalysisEvent::mutable_serviceid() {
  set_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serviceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mico.event.model.AnalysisEvent.serviceId)
  return serviceid_;
}
inline ::std::string* AnalysisEvent::release_serviceid() {
  clear_has_serviceid();
  if (serviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serviceid_;
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AnalysisEvent::set_allocated_serviceid(::std::string* serviceid) {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (serviceid) {
    set_has_serviceid();
    serviceid_ = serviceid;
  } else {
    clear_has_serviceid();
    serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mico.event.model.AnalysisEvent.serviceId)
}

// required string contentItemUri = 2;
inline bool AnalysisEvent::has_contentitemuri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnalysisEvent::set_has_contentitemuri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnalysisEvent::clear_has_contentitemuri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnalysisEvent::clear_contentitemuri() {
  if (contentitemuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentitemuri_->clear();
  }
  clear_has_contentitemuri();
}
inline const ::std::string& AnalysisEvent::contentitemuri() const {
  // @@protoc_insertion_point(field_get:mico.event.model.AnalysisEvent.contentItemUri)
  return *contentitemuri_;
}
inline void AnalysisEvent::set_contentitemuri(const ::std::string& value) {
  set_has_contentitemuri();
  if (contentitemuri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentitemuri_ = new ::std::string;
  }
  contentitemuri_->assign(value);
  // @@protoc_insertion_point(field_set:mico.event.model.AnalysisEvent.contentItemUri)
}
inline void AnalysisEvent::set_contentitemuri(const char* value) {
  set_has_contentitemuri();
  if (contentitemuri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentitemuri_ = new ::std::string;
  }
  contentitemuri_->assign(value);
  // @@protoc_insertion_point(field_set_char:mico.event.model.AnalysisEvent.contentItemUri)
}
inline void AnalysisEvent::set_contentitemuri(const char* value, size_t size) {
  set_has_contentitemuri();
  if (contentitemuri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentitemuri_ = new ::std::string;
  }
  contentitemuri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mico.event.model.AnalysisEvent.contentItemUri)
}
inline ::std::string* AnalysisEvent::mutable_contentitemuri() {
  set_has_contentitemuri();
  if (contentitemuri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentitemuri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mico.event.model.AnalysisEvent.contentItemUri)
  return contentitemuri_;
}
inline ::std::string* AnalysisEvent::release_contentitemuri() {
  clear_has_contentitemuri();
  if (contentitemuri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contentitemuri_;
    contentitemuri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AnalysisEvent::set_allocated_contentitemuri(::std::string* contentitemuri) {
  if (contentitemuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contentitemuri_;
  }
  if (contentitemuri) {
    set_has_contentitemuri();
    contentitemuri_ = contentitemuri;
  } else {
    clear_has_contentitemuri();
    contentitemuri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mico.event.model.AnalysisEvent.contentItemUri)
}

// optional string objectUri = 3;
inline bool AnalysisEvent::has_objecturi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnalysisEvent::set_has_objecturi() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnalysisEvent::clear_has_objecturi() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnalysisEvent::clear_objecturi() {
  if (objecturi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objecturi_->clear();
  }
  clear_has_objecturi();
}
inline const ::std::string& AnalysisEvent::objecturi() const {
  // @@protoc_insertion_point(field_get:mico.event.model.AnalysisEvent.objectUri)
  return *objecturi_;
}
inline void AnalysisEvent::set_objecturi(const ::std::string& value) {
  set_has_objecturi();
  if (objecturi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objecturi_ = new ::std::string;
  }
  objecturi_->assign(value);
  // @@protoc_insertion_point(field_set:mico.event.model.AnalysisEvent.objectUri)
}
inline void AnalysisEvent::set_objecturi(const char* value) {
  set_has_objecturi();
  if (objecturi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objecturi_ = new ::std::string;
  }
  objecturi_->assign(value);
  // @@protoc_insertion_point(field_set_char:mico.event.model.AnalysisEvent.objectUri)
}
inline void AnalysisEvent::set_objecturi(const char* value, size_t size) {
  set_has_objecturi();
  if (objecturi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objecturi_ = new ::std::string;
  }
  objecturi_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mico.event.model.AnalysisEvent.objectUri)
}
inline ::std::string* AnalysisEvent::mutable_objecturi() {
  set_has_objecturi();
  if (objecturi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objecturi_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mico.event.model.AnalysisEvent.objectUri)
  return objecturi_;
}
inline ::std::string* AnalysisEvent::release_objecturi() {
  clear_has_objecturi();
  if (objecturi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = objecturi_;
    objecturi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AnalysisEvent::set_allocated_objecturi(::std::string* objecturi) {
  if (objecturi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete objecturi_;
  }
  if (objecturi) {
    set_has_objecturi();
    objecturi_ = objecturi;
  } else {
    clear_has_objecturi();
    objecturi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mico.event.model.AnalysisEvent.objectUri)
}

// -------------------------------------------------------------------

// ContentEvent

// required string contentItemUri = 1;
inline bool ContentEvent::has_contentitemuri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentEvent::set_has_contentitemuri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentEvent::clear_has_contentitemuri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentEvent::clear_contentitemuri() {
  if (contentitemuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentitemuri_->clear();
  }
  clear_has_contentitemuri();
}
inline const ::std::string& ContentEvent::contentitemuri() const {
  // @@protoc_insertion_point(field_get:mico.event.model.ContentEvent.contentItemUri)
  return *contentitemuri_;
}
inline void ContentEvent::set_contentitemuri(const ::std::string& value) {
  set_has_contentitemuri();
  if (contentitemuri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentitemuri_ = new ::std::string;
  }
  contentitemuri_->assign(value);
  // @@protoc_insertion_point(field_set:mico.event.model.ContentEvent.contentItemUri)
}
inline void ContentEvent::set_contentitemuri(const char* value) {
  set_has_contentitemuri();
  if (contentitemuri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentitemuri_ = new ::std::string;
  }
  contentitemuri_->assign(value);
  // @@protoc_insertion_point(field_set_char:mico.event.model.ContentEvent.contentItemUri)
}
inline void ContentEvent::set_contentitemuri(const char* value, size_t size) {
  set_has_contentitemuri();
  if (contentitemuri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentitemuri_ = new ::std::string;
  }
  contentitemuri_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mico.event.model.ContentEvent.contentItemUri)
}
inline ::std::string* ContentEvent::mutable_contentitemuri() {
  set_has_contentitemuri();
  if (contentitemuri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    contentitemuri_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mico.event.model.ContentEvent.contentItemUri)
  return contentitemuri_;
}
inline ::std::string* ContentEvent::release_contentitemuri() {
  clear_has_contentitemuri();
  if (contentitemuri_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = contentitemuri_;
    contentitemuri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContentEvent::set_allocated_contentitemuri(::std::string* contentitemuri) {
  if (contentitemuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contentitemuri_;
  }
  if (contentitemuri) {
    set_has_contentitemuri();
    contentitemuri_ = contentitemuri;
  } else {
    clear_has_contentitemuri();
    contentitemuri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mico.event.model.ContentEvent.contentItemUri)
}

// -------------------------------------------------------------------

// DiscoveryEvent


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace event
}  // namespace mico

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mico::event::model::Implementation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mico::event::model::Implementation>() {
  return ::mico::event::model::Implementation_descriptor();
}
template <> struct is_proto_enum< ::mico::event::model::RegistrationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mico::event::model::RegistrationType>() {
  return ::mico::event::model::RegistrationType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Event_2eproto__INCLUDED
