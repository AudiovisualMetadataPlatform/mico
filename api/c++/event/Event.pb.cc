// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mico {
namespace event {
namespace model {

namespace {

const ::google::protobuf::Descriptor* RegistrationEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistrationEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalysisEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalysisEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscoveryEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscoveryEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigurationEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigurationEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigurationDiscoverEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigurationDiscoverEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Implementation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RegistrationType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Event_2eproto() {
  protobuf_AddDesc_Event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Event.proto");
  GOOGLE_CHECK(file != NULL);
  RegistrationEvent_descriptor_ = file->message_type(0);
  static const int RegistrationEvent_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationEvent, serviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationEvent, queuename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationEvent, provides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationEvent, requires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationEvent, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationEvent, type_),
  };
  RegistrationEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistrationEvent_descriptor_,
      RegistrationEvent::default_instance_,
      RegistrationEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistrationEvent));
  AnalysisEvent_descriptor_ = file->message_type(1);
  static const int AnalysisEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisEvent, serviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisEvent, contentitemuri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisEvent, objecturi_),
  };
  AnalysisEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnalysisEvent_descriptor_,
      AnalysisEvent::default_instance_,
      AnalysisEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnalysisEvent));
  ContentEvent_descriptor_ = file->message_type(2);
  static const int ContentEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentEvent, contentitemuri_),
  };
  ContentEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentEvent_descriptor_,
      ContentEvent::default_instance_,
      ContentEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentEvent));
  DiscoveryEvent_descriptor_ = file->message_type(3);
  static const int DiscoveryEvent_offsets_[1] = {
  };
  DiscoveryEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscoveryEvent_descriptor_,
      DiscoveryEvent::default_instance_,
      DiscoveryEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscoveryEvent));
  ConfigurationEvent_descriptor_ = file->message_type(4);
  static const int ConfigurationEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationEvent, marmottabaseuri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationEvent, storagebaseuri_),
  };
  ConfigurationEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigurationEvent_descriptor_,
      ConfigurationEvent::default_instance_,
      ConfigurationEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigurationEvent));
  ConfigurationDiscoverEvent_descriptor_ = file->message_type(5);
  static const int ConfigurationDiscoverEvent_offsets_[1] = {
  };
  ConfigurationDiscoverEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigurationDiscoverEvent_descriptor_,
      ConfigurationDiscoverEvent::default_instance_,
      ConfigurationDiscoverEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationDiscoverEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigurationDiscoverEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigurationDiscoverEvent));
  Implementation_descriptor_ = file->enum_type(0);
  RegistrationType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistrationEvent_descriptor_, &RegistrationEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnalysisEvent_descriptor_, &AnalysisEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentEvent_descriptor_, &ContentEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscoveryEvent_descriptor_, &DiscoveryEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigurationEvent_descriptor_, &ConfigurationEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigurationDiscoverEvent_descriptor_, &ConfigurationDiscoverEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Event_2eproto() {
  delete RegistrationEvent::default_instance_;
  delete RegistrationEvent_reflection_;
  delete AnalysisEvent::default_instance_;
  delete AnalysisEvent_reflection_;
  delete ContentEvent::default_instance_;
  delete ContentEvent_reflection_;
  delete DiscoveryEvent::default_instance_;
  delete DiscoveryEvent_reflection_;
  delete ConfigurationEvent::default_instance_;
  delete ConfigurationEvent_reflection_;
  delete ConfigurationDiscoverEvent::default_instance_;
  delete ConfigurationDiscoverEvent_reflection_;
}

void protobuf_AddDesc_Event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Event.proto\022\020mico.event.model\"\323\001\n\021Regi"
    "strationEvent\022\021\n\tserviceId\030\001 \002(\t\022\021\n\tqueu"
    "eName\030\002 \002(\t\022\020\n\010provides\030\003 \002(\t\022\020\n\010require"
    "s\030\004 \002(\t\0228\n\010language\030\005 \001(\0162 .mico.event.m"
    "odel.Implementation:\004JAVA\022:\n\004type\030\006 \001(\0162"
    "\".mico.event.model.RegistrationType:\010REG"
    "ISTER\"M\n\rAnalysisEvent\022\021\n\tserviceId\030\001 \002("
    "\t\022\026\n\016contentItemUri\030\002 \002(\t\022\021\n\tobjectUri\030\003"
    " \001(\t\"&\n\014ContentEvent\022\026\n\016contentItemUri\030\001"
    " \002(\t\"\020\n\016DiscoveryEvent\"E\n\022ConfigurationE"
    "vent\022\027\n\017marmottaBaseUri\030\001 \002(\t\022\026\n\016storage"
    "BaseUri\030\002 \002(\t\"\034\n\032ConfigurationDiscoverEv"
    "ent*/\n\016Implementation\022\010\n\004JAVA\020\001\022\007\n\003CPP\020\002"
    "\022\n\n\006PYTHON\020\003*0\n\020RegistrationType\022\014\n\010REGI"
    "STER\020\001\022\016\n\nUNREGISTER\020\002B\036\n\034eu.mico.platfo"
    "rm.event.model", 614);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Event.proto", &protobuf_RegisterTypes);
  RegistrationEvent::default_instance_ = new RegistrationEvent();
  AnalysisEvent::default_instance_ = new AnalysisEvent();
  ContentEvent::default_instance_ = new ContentEvent();
  DiscoveryEvent::default_instance_ = new DiscoveryEvent();
  ConfigurationEvent::default_instance_ = new ConfigurationEvent();
  ConfigurationDiscoverEvent::default_instance_ = new ConfigurationDiscoverEvent();
  RegistrationEvent::default_instance_->InitAsDefaultInstance();
  AnalysisEvent::default_instance_->InitAsDefaultInstance();
  ContentEvent::default_instance_->InitAsDefaultInstance();
  DiscoveryEvent::default_instance_->InitAsDefaultInstance();
  ConfigurationEvent::default_instance_->InitAsDefaultInstance();
  ConfigurationDiscoverEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Event_2eproto {
  StaticDescriptorInitializer_Event_2eproto() {
    protobuf_AddDesc_Event_2eproto();
  }
} static_descriptor_initializer_Event_2eproto_;
const ::google::protobuf::EnumDescriptor* Implementation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Implementation_descriptor_;
}
bool Implementation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RegistrationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistrationType_descriptor_;
}
bool RegistrationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RegistrationEvent::kServiceIdFieldNumber;
const int RegistrationEvent::kQueueNameFieldNumber;
const int RegistrationEvent::kProvidesFieldNumber;
const int RegistrationEvent::kRequiresFieldNumber;
const int RegistrationEvent::kLanguageFieldNumber;
const int RegistrationEvent::kTypeFieldNumber;
#endif  // !_MSC_VER

RegistrationEvent::RegistrationEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mico.event.model.RegistrationEvent)
}

void RegistrationEvent::InitAsDefaultInstance() {
}

RegistrationEvent::RegistrationEvent(const RegistrationEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mico.event.model.RegistrationEvent)
}

void RegistrationEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queuename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  provides_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requires_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = 1;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistrationEvent::~RegistrationEvent() {
  // @@protoc_insertion_point(destructor:mico.event.model.RegistrationEvent)
  SharedDtor();
}

void RegistrationEvent::SharedDtor() {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (queuename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queuename_;
  }
  if (provides_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete provides_;
  }
  if (requires_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requires_;
  }
  if (this != default_instance_) {
  }
}

void RegistrationEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistrationEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistrationEvent_descriptor_;
}

const RegistrationEvent& RegistrationEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

RegistrationEvent* RegistrationEvent::default_instance_ = NULL;

RegistrationEvent* RegistrationEvent::New() const {
  return new RegistrationEvent;
}

void RegistrationEvent::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_serviceid()) {
      if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serviceid_->clear();
      }
    }
    if (has_queuename()) {
      if (queuename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        queuename_->clear();
      }
    }
    if (has_provides()) {
      if (provides_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        provides_->clear();
      }
    }
    if (has_requires()) {
      if (requires_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        requires_->clear();
      }
    }
    language_ = 1;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistrationEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mico.event.model.RegistrationEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serviceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serviceid().data(), this->serviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_queueName;
        break;
      }

      // required string queueName = 2;
      case 2: {
        if (tag == 18) {
         parse_queueName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queuename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queuename().data(), this->queuename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "queuename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_provides;
        break;
      }

      // required string provides = 3;
      case 3: {
        if (tag == 26) {
         parse_provides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provides()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->provides().data(), this->provides().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "provides");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_requires;
        break;
      }

      // required string requires = 4;
      case 4: {
        if (tag == 34) {
         parse_requires:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requires()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requires().data(), this->requires().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requires");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_language;
        break;
      }

      // optional .mico.event.model.Implementation language = 5 [default = JAVA];
      case 5: {
        if (tag == 40) {
         parse_language:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mico::event::model::Implementation_IsValid(value)) {
            set_language(static_cast< ::mico::event::model::Implementation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .mico.event.model.RegistrationType type = 6 [default = REGISTER];
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mico::event::model::RegistrationType_IsValid(value)) {
            set_type(static_cast< ::mico::event::model::RegistrationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mico.event.model.RegistrationEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mico.event.model.RegistrationEvent)
  return false;
#undef DO_
}

void RegistrationEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mico.event.model.RegistrationEvent)
  // required string serviceId = 1;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serviceid(), output);
  }

  // required string queueName = 2;
  if (has_queuename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queuename().data(), this->queuename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queuename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->queuename(), output);
  }

  // required string provides = 3;
  if (has_provides()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->provides().data(), this->provides().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "provides");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->provides(), output);
  }

  // required string requires = 4;
  if (has_requires()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requires().data(), this->requires().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requires");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->requires(), output);
  }

  // optional .mico.event.model.Implementation language = 5 [default = JAVA];
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->language(), output);
  }

  // optional .mico.event.model.RegistrationType type = 6 [default = REGISTER];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mico.event.model.RegistrationEvent)
}

::google::protobuf::uint8* RegistrationEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mico.event.model.RegistrationEvent)
  // required string serviceId = 1;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serviceid(), target);
  }

  // required string queueName = 2;
  if (has_queuename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queuename().data(), this->queuename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queuename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->queuename(), target);
  }

  // required string provides = 3;
  if (has_provides()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->provides().data(), this->provides().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "provides");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->provides(), target);
  }

  // required string requires = 4;
  if (has_requires()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requires().data(), this->requires().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requires");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->requires(), target);
  }

  // optional .mico.event.model.Implementation language = 5 [default = JAVA];
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->language(), target);
  }

  // optional .mico.event.model.RegistrationType type = 6 [default = REGISTER];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mico.event.model.RegistrationEvent)
  return target;
}

int RegistrationEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string serviceId = 1;
    if (has_serviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serviceid());
    }

    // required string queueName = 2;
    if (has_queuename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queuename());
    }

    // required string provides = 3;
    if (has_provides()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provides());
    }

    // required string requires = 4;
    if (has_requires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requires());
    }

    // optional .mico.event.model.Implementation language = 5 [default = JAVA];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

    // optional .mico.event.model.RegistrationType type = 6 [default = REGISTER];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistrationEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistrationEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistrationEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistrationEvent::MergeFrom(const RegistrationEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serviceid()) {
      set_serviceid(from.serviceid());
    }
    if (from.has_queuename()) {
      set_queuename(from.queuename());
    }
    if (from.has_provides()) {
      set_provides(from.provides());
    }
    if (from.has_requires()) {
      set_requires(from.requires());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistrationEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationEvent::CopyFrom(const RegistrationEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RegistrationEvent::Swap(RegistrationEvent* other) {
  if (other != this) {
    std::swap(serviceid_, other->serviceid_);
    std::swap(queuename_, other->queuename_);
    std::swap(provides_, other->provides_);
    std::swap(requires_, other->requires_);
    std::swap(language_, other->language_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistrationEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistrationEvent_descriptor_;
  metadata.reflection = RegistrationEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnalysisEvent::kServiceIdFieldNumber;
const int AnalysisEvent::kContentItemUriFieldNumber;
const int AnalysisEvent::kObjectUriFieldNumber;
#endif  // !_MSC_VER

AnalysisEvent::AnalysisEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mico.event.model.AnalysisEvent)
}

void AnalysisEvent::InitAsDefaultInstance() {
}

AnalysisEvent::AnalysisEvent(const AnalysisEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mico.event.model.AnalysisEvent)
}

void AnalysisEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contentitemuri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objecturi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalysisEvent::~AnalysisEvent() {
  // @@protoc_insertion_point(destructor:mico.event.model.AnalysisEvent)
  SharedDtor();
}

void AnalysisEvent::SharedDtor() {
  if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serviceid_;
  }
  if (contentitemuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contentitemuri_;
  }
  if (objecturi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete objecturi_;
  }
  if (this != default_instance_) {
  }
}

void AnalysisEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalysisEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalysisEvent_descriptor_;
}

const AnalysisEvent& AnalysisEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

AnalysisEvent* AnalysisEvent::default_instance_ = NULL;

AnalysisEvent* AnalysisEvent::New() const {
  return new AnalysisEvent;
}

void AnalysisEvent::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_serviceid()) {
      if (serviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serviceid_->clear();
      }
    }
    if (has_contentitemuri()) {
      if (contentitemuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        contentitemuri_->clear();
      }
    }
    if (has_objecturi()) {
      if (objecturi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        objecturi_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnalysisEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mico.event.model.AnalysisEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string serviceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serviceid().data(), this->serviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contentItemUri;
        break;
      }

      // required string contentItemUri = 2;
      case 2: {
        if (tag == 18) {
         parse_contentItemUri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentitemuri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contentitemuri().data(), this->contentitemuri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contentitemuri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_objectUri;
        break;
      }

      // optional string objectUri = 3;
      case 3: {
        if (tag == 26) {
         parse_objectUri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objecturi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->objecturi().data(), this->objecturi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "objecturi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mico.event.model.AnalysisEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mico.event.model.AnalysisEvent)
  return false;
#undef DO_
}

void AnalysisEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mico.event.model.AnalysisEvent)
  // required string serviceId = 1;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serviceid(), output);
  }

  // required string contentItemUri = 2;
  if (has_contentitemuri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentitemuri().data(), this->contentitemuri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contentitemuri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->contentitemuri(), output);
  }

  // optional string objectUri = 3;
  if (has_objecturi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objecturi().data(), this->objecturi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objecturi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->objecturi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mico.event.model.AnalysisEvent)
}

::google::protobuf::uint8* AnalysisEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mico.event.model.AnalysisEvent)
  // required string serviceId = 1;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serviceid(), target);
  }

  // required string contentItemUri = 2;
  if (has_contentitemuri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentitemuri().data(), this->contentitemuri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contentitemuri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contentitemuri(), target);
  }

  // optional string objectUri = 3;
  if (has_objecturi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objecturi().data(), this->objecturi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objecturi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->objecturi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mico.event.model.AnalysisEvent)
  return target;
}

int AnalysisEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string serviceId = 1;
    if (has_serviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serviceid());
    }

    // required string contentItemUri = 2;
    if (has_contentitemuri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentitemuri());
    }

    // optional string objectUri = 3;
    if (has_objecturi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objecturi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalysisEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnalysisEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnalysisEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnalysisEvent::MergeFrom(const AnalysisEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serviceid()) {
      set_serviceid(from.serviceid());
    }
    if (from.has_contentitemuri()) {
      set_contentitemuri(from.contentitemuri());
    }
    if (from.has_objecturi()) {
      set_objecturi(from.objecturi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnalysisEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalysisEvent::CopyFrom(const AnalysisEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AnalysisEvent::Swap(AnalysisEvent* other) {
  if (other != this) {
    std::swap(serviceid_, other->serviceid_);
    std::swap(contentitemuri_, other->contentitemuri_);
    std::swap(objecturi_, other->objecturi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnalysisEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalysisEvent_descriptor_;
  metadata.reflection = AnalysisEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContentEvent::kContentItemUriFieldNumber;
#endif  // !_MSC_VER

ContentEvent::ContentEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mico.event.model.ContentEvent)
}

void ContentEvent::InitAsDefaultInstance() {
}

ContentEvent::ContentEvent(const ContentEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mico.event.model.ContentEvent)
}

void ContentEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  contentitemuri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentEvent::~ContentEvent() {
  // @@protoc_insertion_point(destructor:mico.event.model.ContentEvent)
  SharedDtor();
}

void ContentEvent::SharedDtor() {
  if (contentitemuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete contentitemuri_;
  }
  if (this != default_instance_) {
  }
}

void ContentEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentEvent_descriptor_;
}

const ContentEvent& ContentEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

ContentEvent* ContentEvent::default_instance_ = NULL;

ContentEvent* ContentEvent::New() const {
  return new ContentEvent;
}

void ContentEvent::Clear() {
  if (has_contentitemuri()) {
    if (contentitemuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      contentitemuri_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContentEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mico.event.model.ContentEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string contentItemUri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentitemuri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contentitemuri().data(), this->contentitemuri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contentitemuri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mico.event.model.ContentEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mico.event.model.ContentEvent)
  return false;
#undef DO_
}

void ContentEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mico.event.model.ContentEvent)
  // required string contentItemUri = 1;
  if (has_contentitemuri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentitemuri().data(), this->contentitemuri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contentitemuri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contentitemuri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mico.event.model.ContentEvent)
}

::google::protobuf::uint8* ContentEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mico.event.model.ContentEvent)
  // required string contentItemUri = 1;
  if (has_contentitemuri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentitemuri().data(), this->contentitemuri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contentitemuri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contentitemuri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mico.event.model.ContentEvent)
  return target;
}

int ContentEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string contentItemUri = 1;
    if (has_contentitemuri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentitemuri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContentEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentEvent::MergeFrom(const ContentEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contentitemuri()) {
      set_contentitemuri(from.contentitemuri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContentEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentEvent::CopyFrom(const ContentEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContentEvent::Swap(ContentEvent* other) {
  if (other != this) {
    std::swap(contentitemuri_, other->contentitemuri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContentEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentEvent_descriptor_;
  metadata.reflection = ContentEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DiscoveryEvent::DiscoveryEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mico.event.model.DiscoveryEvent)
}

void DiscoveryEvent::InitAsDefaultInstance() {
}

DiscoveryEvent::DiscoveryEvent(const DiscoveryEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mico.event.model.DiscoveryEvent)
}

void DiscoveryEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscoveryEvent::~DiscoveryEvent() {
  // @@protoc_insertion_point(destructor:mico.event.model.DiscoveryEvent)
  SharedDtor();
}

void DiscoveryEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiscoveryEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoveryEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryEvent_descriptor_;
}

const DiscoveryEvent& DiscoveryEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

DiscoveryEvent* DiscoveryEvent::default_instance_ = NULL;

DiscoveryEvent* DiscoveryEvent::New() const {
  return new DiscoveryEvent;
}

void DiscoveryEvent::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscoveryEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mico.event.model.DiscoveryEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mico.event.model.DiscoveryEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mico.event.model.DiscoveryEvent)
  return false;
#undef DO_
}

void DiscoveryEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mico.event.model.DiscoveryEvent)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mico.event.model.DiscoveryEvent)
}

::google::protobuf::uint8* DiscoveryEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mico.event.model.DiscoveryEvent)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mico.event.model.DiscoveryEvent)
  return target;
}

int DiscoveryEvent::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoveryEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscoveryEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscoveryEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscoveryEvent::MergeFrom(const DiscoveryEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscoveryEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveryEvent::CopyFrom(const DiscoveryEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryEvent::IsInitialized() const {

  return true;
}

void DiscoveryEvent::Swap(DiscoveryEvent* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscoveryEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscoveryEvent_descriptor_;
  metadata.reflection = DiscoveryEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigurationEvent::kMarmottaBaseUriFieldNumber;
const int ConfigurationEvent::kStorageBaseUriFieldNumber;
#endif  // !_MSC_VER

ConfigurationEvent::ConfigurationEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mico.event.model.ConfigurationEvent)
}

void ConfigurationEvent::InitAsDefaultInstance() {
}

ConfigurationEvent::ConfigurationEvent(const ConfigurationEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mico.event.model.ConfigurationEvent)
}

void ConfigurationEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  marmottabaseuri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storagebaseuri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigurationEvent::~ConfigurationEvent() {
  // @@protoc_insertion_point(destructor:mico.event.model.ConfigurationEvent)
  SharedDtor();
}

void ConfigurationEvent::SharedDtor() {
  if (marmottabaseuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete marmottabaseuri_;
  }
  if (storagebaseuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete storagebaseuri_;
  }
  if (this != default_instance_) {
  }
}

void ConfigurationEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigurationEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigurationEvent_descriptor_;
}

const ConfigurationEvent& ConfigurationEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

ConfigurationEvent* ConfigurationEvent::default_instance_ = NULL;

ConfigurationEvent* ConfigurationEvent::New() const {
  return new ConfigurationEvent;
}

void ConfigurationEvent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_marmottabaseuri()) {
      if (marmottabaseuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        marmottabaseuri_->clear();
      }
    }
    if (has_storagebaseuri()) {
      if (storagebaseuri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        storagebaseuri_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigurationEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mico.event.model.ConfigurationEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string marmottaBaseUri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marmottabaseuri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->marmottabaseuri().data(), this->marmottabaseuri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "marmottabaseuri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_storageBaseUri;
        break;
      }

      // required string storageBaseUri = 2;
      case 2: {
        if (tag == 18) {
         parse_storageBaseUri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storagebaseuri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storagebaseuri().data(), this->storagebaseuri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "storagebaseuri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mico.event.model.ConfigurationEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mico.event.model.ConfigurationEvent)
  return false;
#undef DO_
}

void ConfigurationEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mico.event.model.ConfigurationEvent)
  // required string marmottaBaseUri = 1;
  if (has_marmottabaseuri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->marmottabaseuri().data(), this->marmottabaseuri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "marmottabaseuri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->marmottabaseuri(), output);
  }

  // required string storageBaseUri = 2;
  if (has_storagebaseuri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storagebaseuri().data(), this->storagebaseuri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storagebaseuri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->storagebaseuri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mico.event.model.ConfigurationEvent)
}

::google::protobuf::uint8* ConfigurationEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mico.event.model.ConfigurationEvent)
  // required string marmottaBaseUri = 1;
  if (has_marmottabaseuri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->marmottabaseuri().data(), this->marmottabaseuri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "marmottabaseuri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->marmottabaseuri(), target);
  }

  // required string storageBaseUri = 2;
  if (has_storagebaseuri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storagebaseuri().data(), this->storagebaseuri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storagebaseuri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->storagebaseuri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mico.event.model.ConfigurationEvent)
  return target;
}

int ConfigurationEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string marmottaBaseUri = 1;
    if (has_marmottabaseuri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->marmottabaseuri());
    }

    // required string storageBaseUri = 2;
    if (has_storagebaseuri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storagebaseuri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigurationEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigurationEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigurationEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigurationEvent::MergeFrom(const ConfigurationEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marmottabaseuri()) {
      set_marmottabaseuri(from.marmottabaseuri());
    }
    if (from.has_storagebaseuri()) {
      set_storagebaseuri(from.storagebaseuri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigurationEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationEvent::CopyFrom(const ConfigurationEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConfigurationEvent::Swap(ConfigurationEvent* other) {
  if (other != this) {
    std::swap(marmottabaseuri_, other->marmottabaseuri_);
    std::swap(storagebaseuri_, other->storagebaseuri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigurationEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigurationEvent_descriptor_;
  metadata.reflection = ConfigurationEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConfigurationDiscoverEvent::ConfigurationDiscoverEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mico.event.model.ConfigurationDiscoverEvent)
}

void ConfigurationDiscoverEvent::InitAsDefaultInstance() {
}

ConfigurationDiscoverEvent::ConfigurationDiscoverEvent(const ConfigurationDiscoverEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mico.event.model.ConfigurationDiscoverEvent)
}

void ConfigurationDiscoverEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigurationDiscoverEvent::~ConfigurationDiscoverEvent() {
  // @@protoc_insertion_point(destructor:mico.event.model.ConfigurationDiscoverEvent)
  SharedDtor();
}

void ConfigurationDiscoverEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfigurationDiscoverEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigurationDiscoverEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigurationDiscoverEvent_descriptor_;
}

const ConfigurationDiscoverEvent& ConfigurationDiscoverEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

ConfigurationDiscoverEvent* ConfigurationDiscoverEvent::default_instance_ = NULL;

ConfigurationDiscoverEvent* ConfigurationDiscoverEvent::New() const {
  return new ConfigurationDiscoverEvent;
}

void ConfigurationDiscoverEvent::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigurationDiscoverEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mico.event.model.ConfigurationDiscoverEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mico.event.model.ConfigurationDiscoverEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mico.event.model.ConfigurationDiscoverEvent)
  return false;
#undef DO_
}

void ConfigurationDiscoverEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mico.event.model.ConfigurationDiscoverEvent)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mico.event.model.ConfigurationDiscoverEvent)
}

::google::protobuf::uint8* ConfigurationDiscoverEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mico.event.model.ConfigurationDiscoverEvent)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mico.event.model.ConfigurationDiscoverEvent)
  return target;
}

int ConfigurationDiscoverEvent::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigurationDiscoverEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigurationDiscoverEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigurationDiscoverEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigurationDiscoverEvent::MergeFrom(const ConfigurationDiscoverEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigurationDiscoverEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationDiscoverEvent::CopyFrom(const ConfigurationDiscoverEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationDiscoverEvent::IsInitialized() const {

  return true;
}

void ConfigurationDiscoverEvent::Swap(ConfigurationDiscoverEvent* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigurationDiscoverEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigurationDiscoverEvent_descriptor_;
  metadata.reflection = ConfigurationDiscoverEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace event
}  // namespace mico

// @@protoc_insertion_point(global_scope)
